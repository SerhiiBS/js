{"version":3,"file":"main.js","mappings":";UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wEAAwE,GAAG;AAC3E;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iCAAiC;AAC/F,sDAAsD,YAAY;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,C;;;;;;;;;;ACvHD","sources":["webpack://todo/webpack/bootstrap","webpack://todo/webpack/runtime/make namespace object","webpack://todo/./src/js/index.js","webpack://todo/./src/scss/index.scss"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function Tasks(input, todosWrapper) {\n    this.input = document.querySelector(input);\n    this.todosWrapper = document.querySelector(todosWrapper);\n\n    // async\n\n    this.addItem = (event) => {\n        event.preventDefault();\n        this.todosWrapper.appendChild(this.createTemplate(this.input.value));\n        this.input.value = '';\n    }\n    this.complete = function(description, id, item) {\n        const currentElement = item.querySelector(`[type=\"checkbox\"]`)\n        const button = item.querySelector('button')\n        if (currentElement.checked) {\n            item.classList.add('todo-item__desc--underline');\n            button.disabled = false;\n        } else {\n            item.classList.remove('todo-item__desc--underline');\n            button.disabled = true;\n        }\n\n     }\n    this.delete = async function(id, item) {\n         item.remove()\n        try {\n            const response = await fetch(`http://localhost:3000/todos/${id}`, {\n                method: \"DELETE\"\n            });\n            const data = response.json();\n            return data\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    this.createTemplate = (description, checked, id) => { // TODO сказать про изменения\n        const item = document.createElement('div');\n        item.classList.add('todo-item');\n        item.classList.add('js--todo-item');\n        item.dataset.id = id;\n        item.innerHTML = (\n            `<label class=\"todo-item__label\">\n                <input type=\"checkbox\" class=\"js--complete\" ${checked ? 'checked=\"true\"' : '' }>\n                <p class=\"todo-item__desc js--desc\">${description}</p>\n             </label>\n             <button class=\"form__button js--delete\" disabled>Удалить</button>`\n        );\n\n        item.querySelector('.js--delete').addEventListener('click', () => this.delete(id, item));\n        item.querySelector('.js--complete').addEventListener('click', () => this.complete(description, id, item));\n        return item;\n    }\n}\nTasks.prototype.loadFromServer = async function () {\n    const response = await fetch(\"http://localhost:3000/todos\", {\n        method: \"GET\"\n    });\n    const data = await response.json();\n    // fetch(\"http://localhost:3000/todos\", {\n    //     method: \"GET\"\n    // })\n    //     .then(res => res.json())\n    //     .then(data => {\n            data.forEach(dataItem => {\n                this.todosWrapper.appendChild(this.createTemplate(\n                    dataItem.text,\n                    dataItem.checked,\n                    dataItem.id\n                ))\n            })\n        // })\n}\n\nTasks.prototype.addServerItem = async function (event) {\n    event.preventDefault();\n    const response = await fetch(\"http://localhost:3000/todos\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"id\": Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n                \"text\": this.input.value,\n                \"checked\": false,\n            })\n    })\n    const dataItem = await response.json();\n    // fetch(\"http://localhost:3000/todos\", {\n    //     method: \"POST\",\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    //     body: JSON.stringify({\n    //         \"id\": Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n    //         \"text\": this.input.value,\n    //         \"checked\": false,\n    //     })\n    // })\n    //     .then(res => res.json())\n    //     .then(dataItem => {\n            this.todosWrapper.appendChild(this.createTemplate(\n                dataItem.text,\n                dataItem.checked,\n                dataItem.id\n            ))\n            this.input.value = ''\n        // })\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    const task = new Tasks(\n        '.js--form__input',\n        '.js--todos-wrapper'\n    );\n    task.loadFromServer()\n    const bindAddServerItem = task.addServerItem.bind(task)\n    const form = document.querySelector('.js--form');\n    form.addEventListener('submit', bindAddServerItem);\n})","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}